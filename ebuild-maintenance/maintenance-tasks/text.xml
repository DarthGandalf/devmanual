<?xml version="1.0"?>
<guide self="ebuild-maintenance/maintenance-tasks/">
<chapter>
<title>Maintenance Tasks</title>

<body>
<p>
This guide aims to explain common everyday ebuild maintenance
routines, as well as other rarer maintenance routines which
developers may not be familiar with.
</p>
</body>

<section>
<title>Stabilizing ebuilds</title>
<body>

<p>
Only architecture maintainers for a given architecture should mark packages as
stable on that architecture. The maintainer of the package should always be
contacted just in case there are reasons not to do so. The exception to this
is if you are part of an architecture team, in which case you may mark the
package stable for that architecture. If you are not part of an architecture
team, you should consult the guidelines below; if the architecture you are
looking for is not listed then please consult the relevant lead.
</p>

<p>
You should <e>never</e> stabilize packages on architectures for which you
cannot test and instead you should file a bug to the relevant architecture
team, such as <c>sparc@gentoo.org</c> asking them to stabilize the ebuild.
Alternatively, you may be able to find Gentoo developers on IRC who could help
you with your request.
</p>

<p>
It is best to not use <c>arch-maintainers@gentoo.org</c>, adding architecture
teams onto a bug's CC list individually instead. That way teams can remove
themselves from the list when they are done, giving a clear indication
of which teams still have to stabilize a package.
</p>

</body>
</section>

<section>
<title>Stabilization rules</title>
<body>

<p>
SPARC: You must have prior permission from the arch lead. Usually we expect
you to be on the sparc alias for QA reasons, although other arrangements
can be made if you will only be working with a small group of packages.
</p>

<p>
ALPHA: Maintainers may keyword their own packages but are reminded to inform
the Alpha team if they can help out with testing and keywording packages so
the team can keep an eye out for possible keywording mistakes.
</p>

<p>
Exotic architectures (like alpha, ia64, sparc, hppa, ppc*) are short
on manpower, so it's best if you avoid opening stabilization bugs for
them unless it is absolutely necessary (eg, a reverse dependency for
your package). More about keywording policies can be found in the
<uri link="::keywording">keywording</uri> section.
</p>
<p>
Some architectures (like m68k, mips, s390, sh) do not maintain a
stable keyword. So there is no use in marking a package stable for one
of these architectures.
</p>
</body>
</section>

<section>
<title>Upgrading ebuilds</title>
<body>

<p>
New ebuilds should rarely go in with "<c>arch</c>" keywords and even if they do
not, the package <e>must</e> be tested on any architectures listed in the
<c>KEYWORDS</c> variable of the new ebuild.
</p>

<p>
Exceptions to the no "<c>arch</c>" rule are major bug fixes, or
security fixes. If the previous version of the ebuild
contains <c>KEYWORDS</c> which you cannot test for, you should
downgrade them: turn any "<c>arch</c>" keyword to "<c>~arch</c>". If you
think that your package may not work at all even on "<c>~arch</c>"
then it is best to leave the keyword out and request testing from the
relevant team: if you are to do this, you must file a bug to the team
in question.
</p>

<p>
If a new version introduces new dependencies which are not available
on some architectures, then you should file a bug or ask on IRC before
you upgrade the package. If you really need to get the ebuild added in
a hurry, for example, for a security fix, then you should drop
any <c>KEYWORDS</c> which are causing problems and CC the relevant
architectures on the bug <d/> you should file a new bug to the
architecture in question regarding this if no bug is already
available.
</p>

<p>
If there are no new dependencies, do not remove keywords if your
commit fails with repoman <d/> please try a full <c>git pull</c> and if
you still have problems, then commit with <c>repoman -I</c> and file a
bug to the broken architecture, noting it in your git commit message.
</p>

<warning>
When committing, make sure that you reference any bugs in the
commit message. Failing to do so is considered
to be in very poor taste and may result in disciplinary action.
</warning>

</body>
</section>

<section>
<title>Removing ebuilds</title>
<body>

<p>
When removing an ebuild make sure that no dependencies in Portage are broken
due to the removal <d/> additionally, your git commit message should explain
clearly why the ebuild is being removed from the git repository.
</p>

<p>
If you need to remove ebuilds, make sure you do not accidentally remove
the newest/only stable ebuild for any architecture. If you would like to
get a newer version marked stable, then please file a bug or ask on IRC.
</p>

<p>
You should also not cause an unnecessary downgrade for any "<c>~arch</c>"
when removing ebuilds <d/> instead, it is best to get the newest version
marked "<c>~arch</c>" first and then remove redundant versions of the ebuild.
</p>

</body>
</section>

<section>
<title>Removing a package</title>
<body>

<p>
When removing packages follow these steps:
</p>

<ol>
  <li>
    Make sure that no dependencies in the Gentoo repository are broken due to
    the removal
  </li>
  <li>Send last rites to gentoo-dev-announce and gentoo-dev</li>
  <li>Mask the package</li>
  <li>Wait 30 days (or more)</li>
  <li>Remove from the git tree unless the reason for removal has been fixed</li>
  <li>
    Remove any references to the package from other ebuilds, e.g.,
    use-conditional dependencies. Blockers are the only exception to this.
  </li>
  <li>Remove package.mask and any package.use.mask entries</li>
  <li>
    Remove the <c>&lt;pkg&gt;</c> tags referencing this package in the
    <uri link="::ebuild-writing/misc-files/metadata">metadata.xml</uri>
    files of other packages.
  </li>
  <li>Close open bugs as WONTFIX</li>
</ol>

<p>
Here is a list of commands that will delete <c>dev-util/pmk</c>
from the tree:
</p>

<pre>
# cd dev-qt
# git rm -rf qtphonon
# git commit --gpg-sign
</pre>

<p>
An example commit message is shown below:
</p>

<pre>
commit b97eb6d43f45dfd5b739638928db22d3f3392685
Author: Michael Palimaka &lt;kensington@gentoo.org&gt;
Date:   Tue Oct 3 21:43:03 2017 +1100

  dev-qt/qtphonon: remove last rited package

  Closes: https://bugs.gentoo.org/629144
</pre>

</body>
</section>

<section>
<title>Conflicting files</title>
<body>

<p>
When you encounter a package that is trying to install files that are
already provided by another package (detectable with
<c>FEATURES=collision-protect</c> for example) you have to fix this
situation before you can commit the ebuild or, if you encounter this
with an existing package, file a bug about that package (see below for
a few exceptions). The reason file conflicts are critical is because
if "foo" provides the file <c>/usr/bin/example</c> and "bar" is
going to overwrite it, and later "bar" is unmerged, Portage will remove
<c>/usr/bin/example</c> and it is therefore likely it will break
"foo".
</p>

<p>
The most obvious fix is to add a blocking dependency to both packages
that want to install that file, so they can't be installed at the same
time. But unless there are also other reasons for those packages to
block each other you should avoid this if possible and rather fix the
package, which could include one or more of the following steps:
</p>

<ul>
  <li>Make "foo" (R)DEPEND on "bar" and not install the conflicting
  file.</li>
  <li>Remove conflicting files from "foo" in <c>src_install</c>
  or <c>pkg_preinst</c>.</li>
  <li>Move conflicting files into a new subpackage and make "foo" and
  "bar" both (R)DEPEND on that package.</li>
  <li>Change the location where "foo" or "bar" installs conflicting
  files.</li>
</ul>

<p>
In some cases conflicting files can't be really fixed or aren't
critical, currently known exceptions are Perl module manpages
(overwriting the ones from Perl itself) and <c>CONFIG_PROTECT</c>'ed
files (which should still be fixed, but aren't critical as Portage
won't overwrite them).
</p>

</body>
</section>

<section>
<title>Homepage unavailable</title>
<body>

<p>
If the <c>HOMEPAGE</c> of your package seems to be unavailable or it
never existed at all, please set the HOMEPAGE variable in every ebuild
to <uri link="https://wiki.gentoo.org/wiki/No_homepage">
https://wiki.gentoo.org/wiki/No_homepage</uri>
</p>

</body>
</section>
</chapter>
</guide>
