<?xml version="1.0"?>
<guide self="ebuild-maintenance/maintenance-tasks/">
<chapter>
<title>Maintenance Tasks</title>

<body>
<p>
This guide aims to explain common everyday ebuild maintenance
routines, as well as other rarer maintenance routines which
developers may not be familiar with.
</p>
</body>

<section>
<title>Removing ebuilds</title>
<body>

<p>
When removing an ebuild make sure that no dependencies in Portage are broken
due to the removal <d/> additionally, your git commit message should explain
clearly why the ebuild is being removed from the git repository.
</p>

<p>
If you need to remove ebuilds, make sure you do not accidentally remove
the newest/only stable ebuild for any architecture. If you would like to
get a newer version marked stable, then please file a bug or ask on IRC.
</p>

<p>
You should also not cause an unnecessary downgrade for any "<c>~arch</c>"
when removing ebuilds <d/> instead, it is best to get the newest version
marked "<c>~arch</c>" first and then remove redundant versions of the ebuild.
</p>

</body>
</section>

<section>
<title>Removing a package</title>
<body>

<p>
When removing packages follow these steps:
</p>

<ol>
  <li>
    Make sure that no dependencies in the Gentoo repository are broken due to
    the removal
  </li>
  <li>Send last rites to gentoo-dev-announce and gentoo-dev</li>
  <li>Mask the package</li>
  <li>Wait 30 days (or more)</li>
  <li>Remove from the git tree unless the reason for removal has been fixed</li>
  <li>
    Remove any references to the package from other ebuilds, e.g.,
    use-conditional dependencies. Blockers are the only exception to this.
  </li>
  <li>Remove package.mask and any package.use.mask entries</li>
  <li>
    Remove the <c>&lt;pkg&gt;</c> tags referencing this package in the
    <uri link="::ebuild-writing/misc-files/metadata">metadata.xml</uri>
    files of other packages.
  </li>
  <li>Close open bugs as WONTFIX</li>
</ol>

<p>
Here is a list of commands that will delete <c>dev-util/pmk</c>
from the tree:
</p>

<pre>
# cd dev-qt
# git rm -rf qtphonon
# git commit --gpg-sign
</pre>

<p>
An example commit message is shown below:
</p>

<pre>
commit b97eb6d43f45dfd5b739638928db22d3f3392685
Author: Michael Palimaka &lt;kensington@gentoo.org&gt;
Date:   Tue Oct 3 21:43:03 2017 +1100

  dev-qt/qtphonon: remove last rited package

  Closes: https://bugs.gentoo.org/629144
</pre>

</body>
</section>

<section>
<title>Conflicting files</title>
<body>

<p>
When you encounter a package that is trying to install files that are
already provided by another package (detectable with
<c>FEATURES=collision-protect</c> for example) you have to fix this
situation before you can commit the ebuild or, if you encounter this
with an existing package, file a bug about that package (see below for
a few exceptions). The reason file conflicts are critical is because
if "foo" provides the file <c>/usr/bin/example</c> and "bar" is
going to overwrite it, and later "bar" is unmerged, Portage will remove
<c>/usr/bin/example</c> and it is therefore likely it will break
"foo".
</p>

<p>
The most obvious fix is to add a blocking dependency to both packages
that want to install that file, so they can't be installed at the same
time. But unless there are also other reasons for those packages to
block each other you should avoid this if possible and rather fix the
package, which could include one or more of the following steps:
</p>

<ul>
  <li>Make "foo" (R)DEPEND on "bar" and not install the conflicting
  file.</li>
  <li>Remove conflicting files from "foo" in <c>src_install</c>
  or <c>pkg_preinst</c>.</li>
  <li>Move conflicting files into a new subpackage and make "foo" and
  "bar" both (R)DEPEND on that package.</li>
  <li>Change the location where "foo" or "bar" installs conflicting
  files.</li>
</ul>

<p>
In some cases conflicting files can't be really fixed or aren't
critical, currently known exceptions are Perl module manpages
(overwriting the ones from Perl itself) and <c>CONFIG_PROTECT</c>'ed
files (which should still be fixed, but aren't critical as Portage
won't overwrite them).
</p>

</body>
</section>

<section>
<title>Homepage unavailable</title>
<body>

<p>
If the <c>HOMEPAGE</c> of your package seems to be unavailable or it
never existed at all, please set the HOMEPAGE variable in every ebuild
to <uri link="https://wiki.gentoo.org/wiki/No_homepage">
https://wiki.gentoo.org/wiki/No_homepage</uri>
</p>

</body>
</section>
</chapter>
</guide>
