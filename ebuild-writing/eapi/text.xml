<?xml version="1.0"?>
<guide self="ebuild-writing/eapi/">
<chapter>
<title>EAPI Usage and Description</title>

<body>
<p>
This section provides usage and descriptions of the different EAPIs.
</p>

<section>
<title>Usage of EAPIs</title>
<body>
<important>
An overview about the important features of each EAPI is provided in the
appendix of the Package Manager Specification.  The two-page leaflet
can be printed out, consulted for reference and is available
as <c>app-doc/pms</c> in the main tree.
</important>
<p>
If EAPI is undefined in an ebuild, then EAPI="0" is selected. If you want to override
the EAPI variable, you have to specify it at the top of the ebuild:
</p>
<codesample lang="ebuild">
# Copyright 1999-2010 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

EAPI=1
inherit eutils

</codesample>

<important>
EAPI must only be defined in ebuild files, not eclasses. (eclasses may have
EAPI-conditional code)
</important>

</body>
</section>

<section>
<title>EAPI="1"</title>
<body>

<ul>
	<li>
		<p><b>Default src_compile Phase Function</b></p>
		<p>
		Support for the <c>ECONF_SOURCE</c> variable, which is also supported by
		<c>econf</c>, has been added to the default <c>src_compile</c> implementation.
		</p>
		<codesample lang="ebuild">
src_compile() {
	if [[ -x ${ECONF_SOURCE:-.}/configure ]] ; then
		econf
	fi
	if [ -f Makefile ] || [ -f GNUmakefile ] || [ -f makefile ] ; then
		emake || die "emake failed"
	fi
}
		</codesample>
	</li>
	<li>
		<p><b>SLOT dependencies</b></p>
		<p>
		Any valid atom can be constrained to match a specific SLOT. This
		is accomplished by appending a colon to the atom, followed by a
		SLOT value.
		</p>
		<p>
		<b>SLOT dependency examples:</b>
		<ul>
			<li><c>x11-libs/qt:3</c></li>
			<li><c>~x11-libs/qt-3.3.8:3</c></li>
			<li><c>&gt;=x11-libs/qt-3.3.8:3</c></li>
			<li><c>=x11-libs/qt-3.3*:3</c></li>
		</ul>
		</p>
	</li>
	<li>
		<p><b>IUSE defaults</b></p>
		<p>
		Add + or - before the name of the use flag in IUSE to turn it on or off by
		default.
		</p>

		<important>
		The default USE-ordering is <c>USE_ORDER="env:pkg:conf:defaults:pkginternal:env.d"</c>
		(see man make.conf)
		</important>
		<important>
		Disabling default IUSE is pretty much useless as it does not
		override the profile and user config (make.conf and package.use)
		</important>

		<codesample lang="ebuild">
# Copyright 1999-2010 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

EAPI=1

IUSE="foo +bar"

		</codesample>
	</li>
</ul>

</body>
</section>


<section>
<title>EAPI="2"</title>
<body>

<subsection>
<title>Helpers</title>
<body>
<ul>
	<li>
		<p><b>doman Language Support</b></p>
		<p>
		<c>doman</c> automatically detects language codes and puts it in the
		appropriate directory.
		<codesample lang="ebuild">
doman foo.1
# will go into /usr/share/man/man1/foo.1
doman foo.lang.1
# will go into /usr/share/man/lang/man1/foo.1 with EAPI="2"
		</codesample>
		</p>
	</li>
</ul>
</body>
</subsection>

<subsection>
<title>Metadata</title>
<body>
<ul>
	<li>
		<p><b>Blocker Atoms</b></p>
		<p>
		<ul>
			<li>
				<p><b>New Meaning for Old Syntax</b></p>
				<p>
				Blocker atoms which use the previously existing !atom syntax now
				have a slightly different meaning. These blocker atoms indicate
				that conflicting packages may be temporarily installed
				simultaneously. When temporary simultaneous installation of
				conflicting packages occurs, the installation of a newer package
				may overwrite any colliding files that belong to an older package
				which is explicitly blocked. When such file collisions occur, the
				colliding files cease to belong to the older package, and they
				remain installed after the older package is eventually
				uninstalled. The older package is uninstalled only after any newer
				blocking packages have been merged on top of it.
			</p>
			</li>
			<li>
				<p><b>New !!atom Syntax</b></p>
				<p>
				A new !!atom syntax is now supported, for use in special cases for
				which temporary simultaneous installation of conflicting packages
				should not be allowed. If a given package happens to be blocked by
				a mixture of atoms consisting of both the !atom and !!atom
				syntaxes, the !!atom syntax takes precedence over the !atom
				syntax.
				</p>
			</li>
		</ul>
		</p>
	</li>
	<li>
		<p><b>USE Dependencies</b></p>
		<p>
		It is possible to depend on USE-flags of packages.
		</p>
		<p>Examples:
		<ul>
			<li><c>foo[bar]</c> means that package foo must have USE-flag bar
			enabled</li>
			<li><c>foo[bar,baz]</c> means that the package foo must have both
				the bar and baz USE-flags enabled
			</li>
			<li><c>foo[-bar,baz]</c> means that the packge foo must have the
				bar USE-flag disabled and baz USE-flag enabled</li>
			<li><c>foo[bar?]</c> means <c>bar? ( foo[bar] ) !bar? ( foo )</c></li>
			<li><c>foo[!bar?]</c> means <c>bar? ( foo ) !bar? ( foo[-bar] )</c></li>
			<li><c>foo[bar=]</c> means <c>bar? ( foo[bar] ) !bar? ( foo[-bar] )</c></li>
			<li><c>foo[!bar=]</c> means <c>bar? ( foo[-bar] ) !bar? ( foo[bar] )</c></li>
		</ul>
		</p>
	</li>
	<li>
		<p><b>Customization of Output File Names in SRC_URI</b></p>
		<p>
		A new syntax is supported which allows customization of the output
		file name for a given URI. In order to customize the output file
		name, a given URI should be followed by a "<c>-&gt;</c>" operator which, in
		turn, should be followed by the desired output file name. As
		usual, all tokens, including the operator and output file name,
		should be separated by whitespace.
		</p>
		<p>Example:</p>
		<codesample lang="ebuild">
SRC_URI="http://dl.google.com/earth/client/GE4/release_4_3/GoogleEarthLinux.bin
                        -&gt; GoogleEarthLinux-${PV}.bin"
		</codesample>
	</li>
</ul>
</body>
</subsection>

<subsection>
<title>Phases</title>
<body>
<ul>
	<li>
		<p><b>New <c>src_prepare</c> Phase Function</b></p>
		<p>
		A new src_prepare function is called after the <c>src_unpack</c>
		function, with cwd initially set to <c>$S</c>.
		</p>
	</li>
	<li>
		<p><b>New <c>src_configure</c> Phase Function</b></p>
		<p>
		The configure portion of the <c>src_compile</c> function has been split
		into a separate function which is named <c>src_configure</c>. The
		<c>src_configure</c> function is called in-between the <c>src_prepare</c> and
		<c>src_compile</c> functions.
		</p>
		<p>The default <c>src_configure</c> and <c>src_compile</c>
		functions in EAPI=2:
		<codesample lang="ebuild">
src_configure() {
	if [[ -x ${ECONF_SOURCE:-.}/configure ]] ; then
		econf
	fi
}

src_compile() {
	if [ -f Makefile ] || [ -f GNUmakefile ] || [ -f makefile ] ; then
		emake || die "emake failed"
	fi
}
		</codesample>
		</p>
	</li>
	<li>
		<p><b>Execution Order of Phase Functions</b></p>
		<p>
		<ul>
			<li><c>pkg_setup</c></li>
			<li><c>src_unpack</c></li>
			<li><c>src_prepare</c></li>
			<li><c>src_configure</c></li>
			<li><c>src_compile</c></li>
			<li><c>src_test</c></li>
			<li><c>src_install</c></li>
			<li><c>pkg_preinst</c></li>
			<li><c>pkg_postinst</c></li>
			<li><c>pkg_prerm</c></li>
			<li><c>pkg_postrm</c></li>
		</ul>
		</p>
	</li>
	<li>
		<p><b>Default Phase Functions</b></p>
		<p>
		The default <c>pkg_nofetch</c> and <c>src_*</c> phase functions are now
		accessible via a function having a name that begins with <c>default_</c>
		and ends with the respective phase function name. For example, a
		call to a function with the name <c>default_src_compile</c> is equivalent
		to a call to the default <c>src_compile</c> implementation.
		</p>
		<p>The default phase functions are:
		<ul>
			<li><c>default_pkg_nofetch</c></li>
			<li><c>default_src_unpack</c></li>
			<li><c>default_src_prepare</c></li>
			<li><c>default_src_configure</c></li>
			<li><c>default_src_compile</c></li>
			<li><c>default_src_test</c></li>
		</ul>
		</p>
	</li>
	<li>
		<p><b>Default Phase Function Alias</b></p>
		<p>
		A function named "<c>default</c>" is redefined for each phase so that it
		will call the <c>default_*</c> function corresponding to the current
		phase. For example, a call to the function named "<c>default</c>" during
		the <c>src_compile</c> phase is equivalent to a call to the function
		named <c>default_src_compile</c>.
		</p>
	</li>
</ul>
</body>
</subsection>

</body>
</section>
<section>
<title>EAPI="4"</title>
<body>

<ul>
	<li>
		<p><b>Gentoo Prefix support</b></p>
		<p>
			Support for the <c>EPREFIX</c>, <c>EROOT</c>, and <c>ED</c>
			variables. If an ebuild uses one of these, it must be EAPI3 aware.
		</p>
	</li>
	<li>
		<p><b>src_unpack() .tar.xz support</b></p>
		<p>
			Support for the <c>.tar.xz</c> format from upstream tarballs.
			unpack() in src_unpack() will only operate on a .tar.xz tarball if
			the ebuild is EAPI3 aware.
		</p>
	</li>
</ul>

</body>
</section>

<section>
<title>EAPI="4"</title>
<body>

<subsection>
<title>Helpers</title>
<body>
<ul>
	<li>
		<p><b>utilities die on their own, unless the nonfatal command is used</b></p>
		<p>
			<!-- TODO link auf fuunction-reference -->
			ebuild functions all die on their own in EAPI=4. In case that this
			non-zero exit status is expected, you may call <c>nonfatal function
			[arg,...]</c>.
		</p>
		<p>Example:</p>
		<codesample lang="ebuild">
EAPI=1
...
src_install() {
	emake DESTDIR="${D}" install || die "make install failed"
	dodoc ChangeLog README
}
		</codesample>
		<codesample lang="ebuild">
EAPI=4
...
src_install() {
	emake DESTDIR="${D}" install
	nonfatal dodoc ChangeLog README
}
		</codesample>
	</li>
	<li>
		<p><b>recursive dodoc</b></p>
		<p>
			<c>dodoc</c> supports <c>-r</c> as the first argument, which leads
			<c>dodoc</c> to install the specified documentation directory
			recursively into the docdir.
		</p>
		<p>Example:</p>
		<codesample lang="ebuild">
src_install() {
	default
	dodoc ChangeLog
	dodoc -r doc/
}
		</codesample>
	</li>
	<li>
		<p><b>doins symlink supports</b></p>
		<p>
			withing EAPI=4, <c>doins</c> supports to install symlinks as symlinks
			when installing recursively. For older EAPIs, the symlink behaviour
			is undefined.
		</p>
	</li>
	<li>
		<p><b>dosed and dohard are banned</b></p>
		<p>
			<c>dosed</c> and <c>dohard</c> commands are banned in this EAPI.
		</p>
	</li>
	<li>
		<p><b>unpack supports .xz and .tar.xz</b></p>
		<p>
			The <c>unpack</c> command supports xz-archives and xz-compressed tar
			files. Please note that the ebuilds must ensure that
			<c>app-arch/xz-utils</c> are installed.
		</p>
	</li>
	<li>
		<p><b>econf adds --disable-dependency-tracking</b></p>
		<p>
			Withing EAPI=4, <c>econf</c> adds
			<c>--disable-dependency-tracking</c> to the default configure
			options.
		</p>
	</li>
	<li>
		<p><b>controllable compression via docompress</b></p>
		<p>
			to compress files in the destination-folder <c>${D}</c>, the
			<c>docompress</c> command may be used (in <c>src_install</c>, after
			the target files are in <c>${D}</c>).
			to control which items should be compressed and which shouldn't
			be compressed, you may include and exclude directories. the default
			inclusion list contains
			<ul>
				<li><c>/usr/share/doc</c></li>
				<li><c>/usr/share/info</c></li>
				<li><c>/usr/share/man</c></li>
			</ul>
			the default exclusion list contains
			<ul>
				<li><c>/usr/share/doc/${PF}/html</c></li>
			</ul>
			when a directory is in- or excluded, all files and directories in the
			given directories shall be added to the corresponding list. if a
			file is in- or excluded, the file shall be added to the corresponding
			list (exclusion is stronger than inclusion - if a file is in both
			lists, the inclusion will be ignored). if a non-existing file or
			directory is given, it will be ignored.
			if the first argument of <c>docompress</c> is <c>-x</c>, the item
			specified will be added to the exclusion list, otherwise it will be
			added to the inclusion list.
		</p>
	</li>
</ul>
</body>
</subsection>

<subsection>
<title>Metadata</title>
<body>
<ul>
	<li>
		<p><b>slot operator dependencies</b></p>
		<p>
			an operator slot dependency contains of a colon followed by einer a
			'<c>*</c>' or '<c>=</c>':
			<ul>
				<li><c>*</c> means that any slot of the given package is
				acceptable. additional for runtime-dependencies is that the
				current package will not break, when the given package is replaced
				by a different slot.</li>
				<li><c>=</c> means that any slot of the given package is
				acceptable. but unlike above (<c>*</c>), for runtime-dependencies
				it will break if the slot of the given package and the current
				package do not match.</li>
			</ul>
		</p>
	</li>
	<li>
		<p><b>use dependencies default</b></p>
		<p>
			additional to the use-deps specified in EAPI=2, a <c>(+)</c> or
			<c>(-)</c> may be added to the use-dep to define a default-value in
			case the use-flag does not exist in the given packge. the <c>(+)</c>
			means that this use-flag is assumed to be enabled, the <c>(-)</c> the
			opposite.
			example:
			<codesample lang="ebuild">
DEPEND="
	>=dev-libs/boost-1.32[boost(+)]
	sys-devel/gcc[openmp(-)]"
			</codesample>
		</p>
	</li>
</ul>
</body>
</subsection>

<subsection>
<title>Phases</title>
<body>
<ul>
	<li>
		<p><b>new pkg_pretend phase</b></p>
		<p>
			the new <c>pkg_pretend</c> phase can be used to do sanity checks
			before the main phase function sequence is run (meaning this phase is
			executed after the package manager has calculated the dependencies
			and before installing them).
			This phase typically checks for a kernel configuration and may
			<c>eerror</c> and <c>die</c> when needed.
			<important>
				There is no guarantee that the ebuild's dependencies are installed
				when this phase is called.
			</important>
			<important>
				As <c>pkg_pretend</c> is not called in the main phase function
				sequence, environment saving is not guaranteed.
			</important>
		</p>
		<p>Example:</p>
		<codesample lang="ebuild">
# Copyright 1999-2009 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

EAPI="4"
inherit linux-info
...

pkg_pretend() {
	if use kernel_linux ; then
		if [[ -e "${ROOT}"/usr/src/linux/.config ]] ; then
			if kernel_is lt 2 6 30 ; then
				CONFIG_CHECK="FUSE_FS"
				FUSE_FS_ERROR="this is an unrealistic testcase..."
				check_extra_config
			fi
		fi
	fi
}
		</codesample>
	</li>
	<li>
		<p><b>default src_install is no longer a non-op</b></p>
		<p>
			the default implementation of <c>src_install</c> is no longer a
			non-op in EAPI=4:
		</p>
		<codesample lang="ebuild">
src_install() {
	if [[ -f Makefile ]] || [[ -f GNUmakefile]] || [[ -f makefile ]] ; then
		emake DESTDIR="${D}" install
	fi

	if ! declare -p DOCS >/dev/null 2>&amp;1 ; then
		local d
		for d in README* ChangeLog AUTHORS NEWS TODO CHANGES THANKS BUGS \
				FAQ CREDITS CHANGELOG ; do
			[[ -s "${d}" ]] &amp;&amp; dodoc "${d}"
		done
	# TODO: wrong "declare -a" command...
	elif declare -p DOCS | grep -q `^declare -a` ; then
		dodoc "${DOCS[@]}"
	else
		dodoc ${DOCS}
	fi
}
		</codesample>
	</li>
	<li>
		<p><b>pkg_info for non-installed packages</b></p>
		<p>
			the <c>pkg_info</c> function may also be called by the
			package-manager for non-installed packages.
			the ebuild writers should note, that dependencies may not be
			available.
		</p>
	</li>
</ul>
</body>
</subsection>

<subsection>
<title>Variables</title>
<body>
<ul>
	<li>
		<p><b>AA and KV variables are gone</b></p>
		<p>
			the <c>${AA}</c> and <c>${KV}</c> variables are no longer set in
			EAPI=4.
		</p>
	</li>
	<li>
		<p><b>no more RDEPEND="${DEPEND}"</b></p>
		<p>
			when <c>RDEPEND</c> is unset, there will no longer be an automatic
			assignement of <c>RDEPEND="${DEPEND}"</c>.
		</p>
	</li>
</ul>
</body>
</subsection>

</body>
</section>

</body>
</chapter>
</guide>
